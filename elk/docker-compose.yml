volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstashdata:
    driver: local
  logstash-keystore:
  filebeatdata:
    driver: local
  logs_volumes:
    driver: local


networks:
  elk:
   driver: bridge


services:

  certs:
   container_name: elk_certs
   networks:
     - elk
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
         exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
         echo "Creating CA";
         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
         unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
         echo "Creating certs";
         echo -ne \
         "instances:\n"\
         "  - name: es01\n"\
         "    dns:\n"\
         "      - es01\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: kibana\n"\
         "    dns:\n"\
         "      - kibana\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: logstash\n"\
         "    dns:\n"\
         "      - logstash\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: filebeat\n"\
         "    dns:\n"\
         "      - filebeat\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         > config/certs/instances.yml;
         mkdir -p /usr/share/elasticsearch/config/certs;
         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
         unzip config/certs/certs.zip -d config/certs;
       fi;
       echo "Setting file permissions"
       chown -R root:root config/certs;
       find . -type d -exec chmod 750 \{\} \;;
       find . -type f -exec chmod 640 \{\} \;;    
       echo "Setting permissions for Logstash user (1000)";
       chown -R 1000:1000 /usr/share/elasticsearch/config/certs;
       chmod -R 755 /usr/share/elasticsearch/config/certs; 
       echo "Waiting for Elasticsearch availability";
       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120

  es01:
    container_name: elk_es01
    networks:
      - elk
    depends_on:
      certs:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  ilm-manager:
    container_name: elk_ilm-manager
    networks:
      - elk
    depends_on:
      es01:
        condition: service_healthy
    build: ./ilm-manager
    volumes:
      - certs:/certs:ro  
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}

  kibana:
    container_name: elk_kibana
    networks:
      - elk
    depends_on:
      es01:
        condition: service_healthy
    build:
      context: kibana/
      args:
        STACK_VERSION: ${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTIC_HOSTS=https://es01:9200
      - ELASTIC_USER=kibana_system
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - CA_CERT=config/certs/ca/ca.crt
      - SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SSL_KEY=config/certs/kibana/kibana.key
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s --cacert /usr/share/kibana/config/certs/ca/ca.crt https://localhost:5601 | grep -q 'HTTP/2 302'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    container_name: elk_logstash
    networks:
      - elk
    depends_on:
      kibana:
        condition: service_healthy
      ilm-manager:
        condition: service_completed_successfully
    build:
      context: logstash/
      args:
        STACK_VERSION: ${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata:/usr/share/logstash/data
      - logstash-keystore:/usr/share/logstash/config
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - LOGSTASH_KEYSTORE_PASS=${LOGSTASH_KEYSTORE_PASS}
    mem_limit: ${LS_MEM_LIMIT}
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9600 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 120

  filebeat:
    container_name: elk_filebeat
    networks:
      - elk
    depends_on:
      logstash:
        condition: service_healthy
    build:
      context: filebeat/
      args:
        STACK_VERSION: ${STACK_VERSION}
    labels:
      co.elastic.logs/module: filebeat
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata:/usr/share/filebeat/data
      #- logs_volumes:/var/log/app:ro # <= real logs 
      - "./logs_data:/var/log/app:ro" # <= provisory fakes logs
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=logstash:5044
      - CA_CERT=/usr/share/filebeat/certs/ca/ca.crt
      - SSL_CERTIFICATE=/usr/share/filebeat/certs/filebeat/filebeat.crt
      - SSL_KEY=/usr/share/filebeat/certs/filebeat/filebeat.key

